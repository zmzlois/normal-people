import { ImageResponse } from "@vercel/og";

// App router includes @vercel/og.
// No need to install it.

export const runtime = "edge";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);

    // ?title=<title>
    const hasTitle = searchParams.has("title");
    const title = hasTitle ? searchParams.get("title")?.slice(0, 100) : "Blog";

    return new ImageResponse(
      (
        <div
          style={{
            backgroundColor: "black",
            backgroundSize: "150px 150px",
            height: "100%",
            width: "100%",
            display: "flex",
            textAlign: "center",
            alignItems: "center",
            justifyContent: "center",
            flexDirection: "column",
            flexWrap: "nowrap",
          }}
        >
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
              justifyItems: "center",
            }}
          >
            {" "}
            <div
              style={{
                fontSize: 60,
                fontStyle: "normal",
                marginTop: 30,
                fontWeight: 700,
                display: "flex",
                letterSpacing: "-0.025em",
                color: "white",
                padding: "0 120px",
                justifyItems: "self-start",
                justifyContent: "flex-start",
                textAlign: "left",
                //   border: "1px solid white",
                lineHeight: 1.4,
                whiteSpace: "pre-wrap",
              }}
            >
              {title}
            </div>
          </div>{" "}
          <div
            style={{
              marginTop: 30,
              width: "100%",
              display: "flex",
              padding: "0 120px",

              //  border: "1px solid white",
              justifyItems: "between",

              fontSize: 30,
              color: "white",
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="200"
              height="200"
              viewBox="0 0 200 200"
              version="1.1"
            >
              <path
                d="M 56.500 62.184 C 50.573 65.912, 39.578 71.011, 32.250 73.429 C 27.235 75.083, 25.253 77, 28.557 77 C 30.601 77, 46.058 70.615, 52.827 66.974 C 55.758 65.398, 57.715 64.647, 57.178 65.304 C 56.640 65.962, 52.764 72.991, 48.563 80.924 C 39.996 97.107, 33.184 107.224, 29.186 109.703 C 24.635 112.526, 22 115.265, 22 117.174 C 22 119.946, 23.615 119.396, 28.384 115 C 32.345 111.349, 33.194 111.003, 38.112 111.035 C 41.075 111.054, 46.425 111.714, 50 112.500 C 53.575 113.286, 60.550 113.936, 65.500 113.943 C 75.848 113.958, 81.230 112.093, 87 106.494 C 88.925 104.626, 92.190 102.394, 94.255 101.534 C 96.319 100.673, 100.547 98.346, 103.650 96.361 L 109.290 92.753 106.759 96.126 C 99.101 106.334, 97.941 115, 104.233 115 C 107.034 115, 114.688 110.804, 122.975 104.725 L 130.451 99.242 133.749 101.758 C 136.256 103.670, 136.901 104.781, 136.437 106.387 C 135.653 109.100, 132.300 112, 129.948 112 C 127.515 112, 126.458 113.855, 128.455 114.621 C 130.605 115.446, 135.753 113.190, 137.540 110.640 C 138.343 109.493, 139 107.092, 139 105.303 C 139 102.701, 138.400 101.741, 136 100.500 C 134.350 99.647, 133 98.594, 133 98.160 C 133 97.727, 135.002 95.871, 137.450 94.038 C 139.897 92.204, 142.128 90.109, 142.406 89.384 C 144.013 85.196, 136.102 88.746, 131.745 94.168 C 127.316 99.679, 108.734 112, 104.852 112 C 102.007 112, 101.833 111.800, 102.460 109.250 C 103.406 105.406, 107.342 98.885, 112.650 92.369 C 115.132 89.322, 116.922 86.589, 116.629 86.295 C 116.335 86.002, 112.136 88.236, 107.297 91.260 C 95.803 98.444, 93.878 99.400, 93.123 98.295 C 91.705 96.220, 87.370 94, 84.738 94 C 80.917 94, 74.930 97.196, 70.045 101.843 C 65.151 106.498, 64.966 108.514, 69.250 110.504 C 72.367 111.951, 72.131 111.995, 63.500 111.568 C 58.550 111.323, 52.250 110.654, 49.500 110.082 C 46.750 109.509, 42.394 108.784, 39.819 108.470 L 35.138 107.898 39.464 101.699 C 41.843 98.290, 47.203 89.057, 51.375 81.182 C 55.547 73.308, 59.869 65.588, 60.980 64.028 C 63.046 61.127, 63.589 58.985, 62.250 59.019 C 61.837 59.029, 59.250 60.454, 56.500 62.184 M 145.431 63.112 C 144.333 64.888, 148.712 65.500, 162.512 65.500 L 176.524 65.500 168.544 80.364 C 159.655 96.921, 150.411 108.318, 144.663 109.807 C 142.852 110.277, 141.356 111.388, 141.160 112.410 C 140.875 113.889, 141.215 114.049, 143.158 113.347 C 145.823 112.383, 153.079 112.435, 164 113.494 C 172.710 114.339, 178.615 113.096, 182.734 109.551 C 186.663 106.169, 185.093 105.534, 179.902 108.406 C 174.145 111.591, 167.624 112.466, 160.369 111.027 C 150.534 109.075, 150.825 109.286, 153.723 106.210 C 160.044 99.501, 164.515 92.856, 171.083 80.412 C 174.968 73.050, 178.564 66.769, 179.074 66.455 C 179.583 66.140, 180 65.217, 180 64.404 C 180 63.145, 178.118 63.020, 167.250 63.563 C 159.840 63.933, 152.718 63.783, 150.244 63.205 C 147.738 62.619, 145.759 62.581, 145.431 63.112 M 115 74.892 C 115 75.382, 116.146 76.071, 117.546 76.422 C 120.617 77.193, 122.856 76.157, 120.857 74.890 C 119.068 73.757, 115 73.758, 115 74.892 M 81.500 97.207 C 76.886 98.820, 69 105.043, 69 107.071 C 69 110.295, 83.447 105.590, 87.487 101.051 C 89.446 98.851, 89.447 98.800, 87.546 97.410 C 85.347 95.802, 85.503 95.807, 81.500 97.207 M 186.597 106.844 C 186.251 107.404, 186.455 108.163, 187.050 108.531 C 188.588 109.481, 189.580 108.180, 188.296 106.896 C 187.578 106.178, 187.019 106.161, 186.597 106.844"
                stroke="none"
                fill="#fffcfc"
                fillRule="evenodd"
              />
              <path d="" stroke="none" fill="#fcfcfc" fillRule="evenodd" />
            </svg>
          </div>
        </div>
      ),
      {
        width: 1200,
        height: 630,
      }
    );
  } catch (e: any) {
    console.log(`${e.message}`);
    return new Response(`Failed to generate the image`, {
      status: 500,
    });
  }
}
